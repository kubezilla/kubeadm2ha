#
# Sets up etcd on the masters.
#
---
- name: Install preliminary kubelet configuration for systemd
  copy: "src=20-etcd-service-manager.conf dest=/etc/systemd/system/kubelet.service.d/20-etcd-service-manager.conf mode=0644 owner=root group=root"

- name: Activate and restart kubelet
  systemd: "name=kubelet enabled=true daemon_reload=true state=restarted"

- name: Clean up /etc/kubernetes/manifests/etcd.yaml from previous installations
  file: "path=/etc/kubernetes/manifests/etcd.yaml state=absent"

- name: Clean up /var/lib/etcd/member from previous installations
  file: "path=/var/lib/etcd/member state=absent"

- name: Clean up /etc/kubernetes/pki from previous installations
  file: "path=/etc/kubernetes/pki state=absent"

- name: Clean up /tmp/certs from previous installations on primary etcd node
  file: "path=/tmp/certs state=absent"
  when: "'primary-etcd' in group_names"

- name: Generate versioncfg.yaml on primary etcd node
  template: src=versioncfg.yaml.j2 dest=/root/versioncfg.yaml
  when: "'primary-etcd' in group_names"

- name: Create temporary cert directories on primary etcd node
  file: "path=/tmp/certs/{{ hostvars[item]['ansible_default_ipv4']['address'] }}/certs state=directory"
  with_items: "{{ groups['etcd'] }}"
  when: "'primary-etcd' in group_names"

- name: Generate kubeadmcfg.yaml on primary etcd node
  template: src=kubeadmcfg.yaml.j2 dest=/tmp/certs/{{ hostvars[etcdnode]['ansible_default_ipv4']['address'] }}/kubeadmcfg.yaml
  with_items: "{{ groups['etcd'] }}"
  loop_control:
    loop_var: etcdnode
  when: "'primary-etcd' in group_names"

- name: Create etcd CA
  command: "kubeadm alpha phase certs etcd-ca --config=/root/versioncfg.yaml"
  when: "'primary-etcd' in group_names"

- name: Create script for creating all certs for all etcd nodes primary etcd node
  template: "src=create-certs.sh.j2 dest=/root/create-certs.sh mode=0755"
  when: "'primary-etcd' in group_names"

- name: Run script for creating all certs for all etcd nodes primary etcd node
  command: "/root/create-certs.sh"
  when: "'primary-etcd' in group_names"

- name: Archive certificate files on primary etcd node
  archive: "path=/tmp/certs dest=/tmp/certs.tar.gz"
  when: "'primary-etcd' in group_names"

- name: Fetch certificate files from primary etcd node
  fetch: "src=/tmp/certs.tar.gz dest=/tmp/ flat=yes"
  when: "'primary-etcd' in group_names"

- name: Unarchive certificates on localhost...
  local_action: "unarchive copy=no src=/tmp/certs.tar.gz dest=/tmp"
  when: "'primary-etcd' in group_names"

- name: Copy certs to all etcd nodes
  copy: "src=/tmp/certs/{{ ansible_default_ipv4.address }}/pki dest=/etc/kubernetes/ mode=0644 directory_mode=0755 owner=root group=root"

- name: Copy kubeadmcfg.yaml to all etcd nodes
  copy: "src=/tmp/certs/{{ ansible_default_ipv4.address }}/kubeadmcfg.yaml dest=/root/"

- name: Create etcd manifests on all etcd nodes
  command: "kubeadm alpha phase etcd local --config=/root/kubeadmcfg.yaml"

- name: Check etcd cluster health on primary etcd node
  shell: "for i in 1 2 3 4 5; do docker run --rm --net host -v /etc/kubernetes:/etc/kubernetes gcr.io/google_containers/etcd-{{ HOST_ARCH }}:{{ ETCD_TAG }} etcdctl --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --ca-file /etc/kubernetes/pki/etcd/ca.crt --endpoints https://{{ ansible_default_ipv4.address }}:2379 cluster-health && exit 0; sleep 2s; done; /bin/false"
  when: "'primary-etcd' in group_names"

- name: Archive certs for master nodes on primary etcd node
  archive: "path=/etc/kubernetes/pki/etcd/ca.crt,/etc/kubernetes/pki/apiserver-etcd-client.crt,/etc/kubernetes/pki/apiserver-etcd-client.key dest=/tmp/etcd-certs.tar.gz"
  when: "'primary-etcd' in group_names"

- name: Fetch master certs from primary etcd node
  fetch: "src=/tmp/etcd-certs.tar.gz dest=/tmp/ flat=yes"
  when: "'primary-etcd' in group_names"